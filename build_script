#!/bin/bash
#----------------------------------------------------------------------
# build_script - build java tree without ant
#
# this bundles everything into psas.jar and udp.jar,
#   then rocketview.tar.gz
#
# builds UDP version
#----------------------------------------------------------------------

Script=${0#*/}
declare -i fail=0
declare -i nArg=$#

# script usage
function Usage {
    echo "Usage: $Script              build all psas java source"
    echo "       $Script [java_files] compile given java files"
    echo "       $Script [java_dirs]  compile given java directories"
    echo "       $Script -clean       remove all derived files"
    echo "       $Script -help        print this"
    echo ""
    exit 1
} # end Usage

# function to compile java source
function jeev {
    echo "...$Script compiling $@"

    dire=${1%/*}
    outl=$dire/_compile.lis

    # remove old compiler listing
    rm -f $outl

    # compile given arguments
    if javac \
	-classpath build:build/jfreechart.jar:build/jcommon.jar \
	-d build -deprecation \
	$@ > $outl 2>&1
    then
	rm -f $outl
    else
	let fail=$fail+1
	echo "*** failure# $fail  messages in $outl"
    fi
}	# end jeev

# 1-argument actions
if [[ $nArg -eq 1 ]]
then
    # do -clean action and exit
    if [[ "$1" = "-clean" ]]; then
	echo "...$Script removing derived files"
	rm -rf build
	find . -name '*.lis' -exec rm {} \;
	exit 0
    fi

    # do -help (-h*) action and exit
    if [[ -z ${1##-h*} ]]; then
	Usage
    fi
fi

# prepare build tree
mkdir -p build
if cp -vf ext/*.jar build; then
    echo ""	# copy ok
else
    echo "*** failed copying jar files to build tree"
    let fail=$fail+1
fi

# count arguments
if [[ $# -gt 0 ]]
then
    # compile each argument
    for arg in "$@"; do
	if [[ -f $arg ]]; then
	    jeev $arg		# compile a java file
	else
	    jeev $arg/*.java	# compile a directory of java files
	fi
    done

else
    # no arguments given: compile all psas java source
    jeev src/cansocket/*.java
    ## jeev src/launchcontrol/*.java
    ## jeev src/manualuplink/*.java
    jeev src/stripchart/*.java
    jeev src/rocketview/*.java
fi

# announce errors & exit if any
echo ""
echo "...$Script compilation produced $fail error(s)"
if [[ $fail -gt 0 ]]; then
    exit $fail
fi

# switch to build for pottery class
cd build

# make running easy
cat >| jarpath << EOF
alias rv='java -jar psas.jar'
alias tt='java -jar tcp.jar'
alias uu='java -jar udp.jar'
EOF

# build psas jar file
JarOut=psas.jar
JarMan=${JarOut}_manifest
JarLis=${JarOut}_build.lis
echo ""
echo "...$Script making $JarOut"

cat >| $JarMan << EOF
Class-Path: jfreechart.jar jcommon.jar
Main-Class: rocketview/Rocketview
EOF

if jar cvmf $JarMan $JarOut \
	rocketview/*.class \
	stripchart/*.class \
	cansocket/*.class \
    > ${JarLis} 2>&1
then
    echo "...$Script makes $JarOut"
else
    echo "...$Script fails to make $JarOut"
    exit 3
fi

if jar -i $JarOut; then
    echo "...$Script indexes $JarOut"
else
    echo "...$Script fails to index $JarOut"
    exit 4
fi
echo ""
echo "...$Script output is build/$JarOut"

# build a UDP test jar file
JarOut=udp.jar
JarMan=${JarOut}_manifest
JarLis=${JarOut}_build.lis

echo ""
echo "...$Script making $JarOut"
echo "Main-Class: cansocket/UDPCanSocketTest" >| $JarMan

if jar cvmf $JarMan $JarOut cansocket/*.class > ${JarLis} 2>&1
then
    echo "...$Script makes $JarOut"
else
    echo "...$Script fails to make $JarOut"
    exit 5
fi

if jar -i $JarOut; then
    echo "...$Script indexes $JarOut"
else
    echo "...$Script fails to index $JarOut"
    exit 6
fi
## echo "...$Script output is build/$JarOut"

if tar cvf rocketview.tar jarpath *.jar; then
    echo "...$Script creates rocketview.tar"
else
    echo "...$Script fails to create rocketview.tar"
    exit 7
fi

if gzip rocketview.tar; then
    echo "...$Script creates rocketview.tar.gz"
else
    echo "...$Script fails to create rocketview.tar.gz"
    exit 8
fi

echo "...$Script success"
exit 0
# end build_script
#----------------------------------------------------------------------
